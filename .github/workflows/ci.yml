name: CI

on: [push, pull_request]

jobs:
  build-osx:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          brew update
          brew install cmake glfw
      - name: Build
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --parallel
      - name: Verify artifacts
        run: |
          # Verify libraries
          ls -la build/lib/libqvlib.a
          [ -f build/lib/libqvlib.a ]
          ls -la build/lib/libsubdivide.a
          [ -f build/lib/libsubdivide.a ]
          ls -la build/lib/libviewer.a
          [ -f build/lib/libviewer.a ]

          # Verify example binaries exist
          ls -la build/bin/ccsub
          [ -f build/bin/ccsub ]
          ls -la build/bin/loopsub
          [ -f build/bin/loopsub ]
          ls -la build/bin/subviewer
          [ -f build/bin/subviewer ]

      - name: Test CLI help commands
        run: |
          # Test each CLI with help flag
          echo "Testing ccsub --help"
          build/bin/ccsub --help || build/bin/ccsub -h

          echo "Testing loopsub --help"
          build/bin/loopsub --help || build/bin/loopsub -h

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libglfw3-dev
      - name: Build
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --parallel
      - name: Verify artifacts
        run: |
          # Verify libraries
          ls -la build/lib/libqvlib.a
          [ -f build/lib/libqvlib.a ]
          ls -la build/lib/libsubdivide.a
          [ -f build/lib/libsubdivide.a ]
          ls -la build/lib/libviewer.a
          [ -f build/lib/libviewer.a ]

          # Verify example binaries exist
          ls -la build/bin/ccsub
          [ -f build/bin/ccsub ]
          ls -la build/bin/loopsub
          [ -f build/bin/loopsub ]
          ls -la build/bin/subviewer
          [ -f build/bin/subviewer ]

      - name: Test CLI help commands
        run: |
          # Test each CLI with help flag
          echo "Testing ccsub --help"
          build/bin/ccsub --help || build/bin/ccsub -h

          echo "Testing loopsub --help"
          build/bin/loopsub --help || build/bin/loopsub -h

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          vcpkg install glfw3:x64-windows
      - name: Build
        shell: pwsh
        run: |
          # Get-Command finds the executable in PATH
          $vcpkgExePath = (Get-Command vcpkg -ErrorAction Stop).Source
          # Get the directory of the executable
          $vcpkgRoot = (Get-Item $vcpkgExePath).DirectoryName
          cmake -S . -B build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="$vcpkgRoot\scripts\buildsystems\vcpkg.cmake"
          cmake --build build --config Release --parallel
      
      - name: Verify artifacts
        shell: pwsh
        run: |
          # Verify libraries
          Write-Host "Checking for library files..."
          $libs = @(
              "$pwd\build\lib\Release\qvlib.lib",
              "$pwd\build\subdivide\Release\subdivide.lib",
              "$pwd\build\subdivide\viewer\Release\viewer.lib"
          )
          
          foreach ($lib in $libs) {
              if (-not (Test-Path $lib)) {
                  Write-Error "Library not found: $lib"
                  exit 1
              }
              Write-Host "Found: $lib"
          }

          # Verify example binaries exist
          Write-Host "`nChecking for executable files..."
          $bins = @(
              "$pwd\build\subdivide\examples\Release\ccsub.exe",
              "$pwd\build\subdivide\examples\Release\loopsub.exe",
              "$pwd\build\subdivide\examples\Release\subviewer.exe"
          )
          
          foreach ($bin in $bins) {
              if (-not (Test-Path $bin)) {
                  Write-Error "Binary not found: $bin"
                  exit 1
              }
              Write-Host "Found: $bin"
          }

      - name: Test CLI help commands
        shell: pwsh
        run: |
          # Test each CLI with help flag
          $ErrorActionPreference = 'Stop'
          
          Write-Host "`nTesting ccsub --help"
          & "$pwd\build\subdivide\examples\Release\ccsub.exe" --help
          if ($LASTEXITCODE -ne 0) {
              & "$pwd\build\subdivide\examples\Release\ccsub.exe" -h
          }

          Write-Host "`nTesting loopsub --help"
          & "$pwd\build\subdivide\examples\Release\loopsub.exe" --help
          if ($LASTEXITCODE -ne 0) {
              & "$pwd\build\subdivide\examples\Release\loopsub.exe" -h
          }
